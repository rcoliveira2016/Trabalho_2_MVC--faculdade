@model Trabalho_2_MVC.ViewModels.OrdemServicoViewModel

@{
    ViewBag.Title = "Cadastro";
    var action = Model.RegistroNovo ? "Cadastro" : "Editar";
}

<h2>Cadastro</h2>


@using (Html.BeginForm(action, "OredensServicos", FormMethod.Post, new { id = "form-cadastro" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Ordem de serviço</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.IdCliente, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IdCliente", null, htmlAttributes: new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IdUsuario, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IdUsuario", null, htmlAttributes: new { @class = "form-control", @readonly = !Model.RegistroNovo })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IdServico, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IdServico", null, htmlAttributes: new { @class = "form-control", @readonly = !Model.RegistroNovo })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Unitario, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Unitario, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>


        <fieldset>
            <legend>Forma Pagamento</legend>
            <div class="form-group">
                @Html.LabelFor(model => model.TipoPagamento, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("TipoPagamento", null, htmlAttributes: new { @class = "form-control", @readonly = !Model.RegistroNovo})
                </div>
            </div>
            <div id="DivTipoCartao">
                <div class="form-group">
                    @Html.LabelFor(model => model.NumeroCartão, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NumeroCartão, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CodigoSegurança, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CodigoSegurança, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
            </div>
            <div id="DivTipoBoleto">
                <div class="form-group">
                    @Html.LabelFor(model => model.CodigoBarra, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CodigoBarra, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    </div>
                </div>
            </div>
            <div id="DivTipoPix">
                <div class="form-group">
                    @Html.LabelFor(model => model.CodigoPix, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CodigoPix, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    </div>
                </div>
            </div>
        </fieldset>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Salvar" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.Partial("~/Views/Shared/Partial/_AcaoVoltarListagem.cshtml", Model)
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var parametrosInit = {
            viewModel: @Html.Raw(Json.Encode(Model)),
            acao: "@action"
        };

        function RandomHelper(min, max) {
            return Math.round(Math.random() * (max - min)) + min;
        }

        function uuidv4() {
            return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
            );
        }


        var eTipoFormaPagamento = 
        {
            Cartao:1,
            Boleto:2,
            Pix:3,
        };

        var $formCadastro = $("#form-cadastro");
        var $divTipoCartao = $("#DivTipoCartao"),
            $divTipoBoleto = $("#DivTipoBoleto"),
            $divTipoPix = $("#DivTipoPix"),
            $TipoPagamento = $("#TipoPagamento");

        var mudarEstadoDivsTiposPagamentos = function () {
            $divTipoCartao.hide();
            $divTipoBoleto.hide();
            $divTipoPix.hide();
            switch (parseInt($TipoPagamento.val())) {
                case eTipoFormaPagamento.Cartao:
                    $divTipoCartao.show();
                    break;
                case eTipoFormaPagamento.Boleto:
                    $("#CodigoBarra").val(parametrosInit.viewModel.CodigoBarra || RandomHelper(10000000000, 99999999999))
                    $divTipoBoleto.show();
                    break;
                case eTipoFormaPagamento.Pix:
                    $("#CodigoPix").val(parametrosInit.viewModel.CodigoPix || uuidv4())
                    $divTipoPix.show();
                    break;
            }
        }

        $formCadastro.validate({
            rules: {
                IdCliente: {
                    required: true
                },
                IdUsuario: {
                    required: true
                },
                IdServico: {
                    required: true
                },
                Unitario: {
                    required: true
                },
                TipoPagamento: {
                    required: true
                },
                NumeroCartão: {
                    required: function () {
                        return parseInt($TipoPagamento.val()) == eTipoFormaPagamento.Cartao
                    }
                },
                CodigoSegurança: {
                    required: function () {
                        return parseInt($TipoPagamento.val()) == eTipoFormaPagamento.Cartao
                    }
                },
                CodigoBarra: {
                    required: function () {
                        return parseInt($TipoPagamento.val()) == eTipoFormaPagamento.Boleto
                    }
                },
                CodigoPix: {
                    required: function () {
                        return parseInt($TipoPagamento.val()) == eTipoFormaPagamento.Pix
                    }
                }
            },
        });

        mudarEstadoDivsTiposPagamentos();

        $TipoPagamento.on('change', function () {
            mudarEstadoDivsTiposPagamentos();
        })

    </script>
}